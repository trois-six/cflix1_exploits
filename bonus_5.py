#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
import configparser
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import urllib
from io import BytesIO
import binascii
import struct
import sys
import numpy as np
from itertools import chain
from ast import literal_eval
from PIL import Image


#
# Variables
#

debugOrNot = False
target_hostname = 'cflix.localdomain'
target_proto = 'https'
config = configparser.ConfigParser()
config.read('config.ini')
username = config['credentials']['username']
password = config['credentials']['password']
base_url = target_proto + '://' + target_hostname
output_file_png = 'bonus_5.png'
output_file_zip = 'bonus_5.zip'


#
# Modified functions from script inside bonus_5.zip
#

def tupleToString(array,size):
  oneD = list(chain.from_iterable(array))
  arrayOfstr = []
  for i in oneD:
    arrayOfstr.append(str(i))
  new=[]
  for i in range(0, len(arrayOfstr), size):
    new.append(arrayOfstr[i : i+size])
  return new

def transpose(funct,size):
  transpose_new = np.array(tupleToString(funct,size))
  transpose_new = transpose_new.transpose()
  transpose_new = np.fliplr(transpose_new)
  arrayOfTrans = []
  oneD = list(chain.from_iterable(transpose_new))
  for i in oneD:
    arrayOfTrans.append(literal_eval(i))
  new=[]
  for i in range(0, len(arrayOfTrans), size):
    new.append(arrayOfTrans[i : i+size])
  return new

def lineExange(funct,size):
  new = funct
  for i in range (0,len(new)-1,2):
    new[i],new[i+1] = new[i+1], new[i]
  return new

def invertLineBy(funct,size):
  new = []
  lineReverse = funct
  for j in range (8):
    for i in range(j,len(lineReverse),8):
      new.append(lineReverse[i])
  return new

def invertPyxelOnSameLine(funct,size):
  new = funct
  for i in range (len(new)):
    for j in range (0,len(new)-1,2):
      new[i][j],new[i][j+1] = new[i][j+1],new[i][j]
  return new

def invertSplitByTwo(funct,size):
  new = funct
  for i in range(len(new)):
    new[i][int(len(new[i])/2):], new[i][:int(len(new[i])/2)] = new[i][:int(len(new[i])/2)], new[i][int(len(new[i])/2):]
  new[0:int(len(new)/2)], new[int(len(new)/2):len(new)] = new[int(len(new)/2):len(new)], new[0:int(len(new)/2)]
  return new

def loadImage(image):
  im = Image.open(image)
  new = []
  pixelMap = im.load()
  orginalPixel = []
  for i in range(im.size[1]):
    for j in range(im.size[0]):
      orginalPixel.append(pixelMap[j,i])
  sqrt = int(np.sqrt(len(orginalPixel)))
  for i in range(0, len(orginalPixel), sqrt):
    new.append(orginalPixel[i : i+sqrt])
  return new

def saveImage(imgData, imageName, oldImage):
  im = Image.open(oldImage)
  pixels_out = []
  new = imgData
  for row in new:
    for tup in row:
       pixels_out.append(tup)
  image_out = Image.new(im.mode, im.size)
  image_out.putdata(pixels_out)
  image_out.save(imageName if imageName.endswith(".png") else imageName + ".png")
  return pixels_out

def generateImg(img):
  imgSize = len(img)
  img = lineExange(img, imgSize)
  img = invertLineBy(img, imgSize)
  img = transpose(img, imgSize)
  img = invertPyxelOnSameLine(img, imgSize)
  img = invertSplitByTwo(img, imgSize)
  return img

#
# Debug
#

def myDebug(param):
  if debugOrNot == True:
    print(param)


#
# requestDebug
#

def requestDebug(s, req):
  prepared = req.prepare()
  myDebug('-----------REQUEST-----------')
  myDebug(prepared.method + ' ' + prepared.url)
  myDebug('\n'.join('{}: {}'.format(k, v) for k, v in prepared.headers.items()))
  if prepared.body != None:
    myDebug('\n' + prepared.body)
  r = s.send(prepared)
  r.encoding = 'UTF-8'
  myDebug('\n-----------RESPONSE-----------')
  myDebug('\n'.join('{}: {}'.format(k, v) for k, v in r.headers.items()) + '\n')
  return r


#
# Main
#

s = requests.Session()
s.verify = False

headers = {
  'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.104 Safari/537.36',
  'Accept-Encoding': 'none'
}


#
# Get __RequestVerificationToken hidden parameter from FORM
#

req = requests.Request('GET', base_url, headers=headers)
r = requestDebug(s, req)
cookies = requests.utils.dict_from_cookiejar(s.cookies)
token = BeautifulSoup(r.text, 'lxml').find('input', { 'name': '__RequestVerificationToken' }).get('value')
myDebug(token)


#
# Login
#

headers['Content-Type'] = 'application/x-www-form-urlencoded'
payload = 'Login=' + urllib.parse.quote_plus(username) + '&Password=' + urllib.parse.quote_plus(password) + '&__RequestVerificationToken=' + token
req = requests.Request('POST', base_url + '/Login?returnurl=%2F', headers=headers, data=payload, cookies=cookies)
r = requestDebug(s, req)
cookies = requests.utils.dict_from_cookiejar(s.cookies)
del headers['Content-Type']


#
# Browse /Media/9 and GET picture location
#

req = requests.Request('GET', base_url + '/Media/9', headers=headers, cookies=cookies)
r = requestDebug(s, req)
picture = BeautifulSoup(r.text, 'lxml').find('div', { 'class': 'ui embed' }).get('data-placeholder')


#
# Download scrambled picture, save png in one BytesIO and zip from it
#

req = requests.Request('GET', base_url + picture, headers=headers)
r = requestDebug(s, req)
fd_in = BytesIO(r.content)
fd_png_in = BytesIO()
fd_zip_out = open(output_file_zip, 'wb+')
after_end = False
fd_in.read(8)
bytes_read = 8
while after_end == False:
  chunk_size = int.from_bytes(fd_in.read(4), byteorder='big')
  myDebug("Chunk size: %s" % chunk_size)
  chunk_type = fd_in.read(4)
  myDebug("Chunk type: %s" % chunk_type)
  content = int.from_bytes(fd_in.read(chunk_size), byteorder='big')
  crc = int.from_bytes(fd_in.read(4), byteorder='big')
  myDebug("CRC: %s" % crc)
  bytes_read += 12 + chunk_size
  if chunk_type == b'IEND':
    after_end = True

bytes_to_read = bytes_read
fd_in.seek(0)
while bytes_to_read > 0:
  content_size = bytes_to_read if bytes_to_read <= 1024 else 1024
  content = fd_in.read(content_size)
  fd_png_in.write(bytearray(content))
  bytes_to_read -= content_size

current_location = fd_in.tell()
fd_in.seek(0, 2)
bytes_zip = fd_in.tell() - current_location
myDebug("Writing zip file: %s, %s bytes" % (output_file_zip, bytes_zip))
fd_in.seek(-bytes_zip, 1)
while True:
  content = fd_in.read(1024)
  if not content: break
  fd_zip_out.write(bytearray(content))
fd_zip_out.close()
fd_in.close()


#
# Unscramble picture
#

fd_png_in.seek(0)
image = loadImage(fd_png_in)
newImage = generateImg(image)
myDebug("Writing unscrambled png file: %s" % output_file_png)
fd_png_in.seek(0)
saveImage(newImage, output_file_png, fd_png_in)
fd_png_in.close()
print("Look at Easter Egg in %s" % output_file_png)


#
# Logout
#

req = requests.Request('GET', base_url + '/Account/Logout', headers=headers, cookies=cookies)
r = requestDebug(s, req)

